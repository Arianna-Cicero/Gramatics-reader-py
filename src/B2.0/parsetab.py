
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALEATORIO ASSIGN CONCAT DIVIDE ENTRADA ESCREVER ID LPAREN MINUS NUMBER PLUS RPAREN SEMICOLON STRING TIMESprogram : statement\n               | program statementstatement : ID ASSIGN expression SEMICOLONstatement : ESCREVER LPAREN expression RPAREN SEMICOLONstatement : ID ASSIGN ENTRADA LPAREN RPAREN SEMICOLON\n                 | ID ASSIGN ENTRADA SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression CONCAT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : IDexpression : ENTRADAexpression : ALEATORIO'
    
_lr_action_items = {'ID':([0,1,2,5,6,7,11,17,18,19,20,21,22,24,34,35,],[3,3,-1,-2,8,8,8,-3,8,8,8,8,8,-6,-4,-5,]),'ESCREVER':([0,1,2,5,17,24,34,35,],[4,4,-1,-2,-3,-6,-4,-5,]),'$end':([1,2,5,17,24,34,35,],[0,-1,-2,-3,-6,-4,-5,]),'ASSIGN':([3,],[6,]),'LPAREN':([4,6,7,10,11,18,19,20,21,22,],[7,11,11,23,11,11,11,11,11,11,]),'ENTRADA':([6,7,11,18,19,20,21,22,],[10,16,16,16,16,16,16,16,]),'NUMBER':([6,7,11,18,19,20,21,22,],[12,12,12,12,12,12,12,12,]),'STRING':([6,7,11,18,19,20,21,22,],[13,13,13,13,13,13,13,13,]),'ALEATORIO':([6,7,11,18,19,20,21,22,],[14,14,14,14,14,14,14,14,]),'SEMICOLON':([8,9,10,12,13,14,16,26,27,28,29,30,31,32,33,],[-15,17,24,-13,-14,-17,-16,34,-7,-8,-9,-10,-11,35,-12,]),'PLUS':([8,9,10,12,13,14,15,16,25,27,28,29,30,31,33,],[-15,18,-16,-13,-14,-17,18,-16,18,18,18,18,18,18,-12,]),'MINUS':([8,9,10,12,13,14,15,16,25,27,28,29,30,31,33,],[-15,19,-16,-13,-14,-17,19,-16,19,19,19,19,19,19,-12,]),'TIMES':([8,9,10,12,13,14,15,16,25,27,28,29,30,31,33,],[-15,20,-16,-13,-14,-17,20,-16,20,20,20,20,20,20,-12,]),'DIVIDE':([8,9,10,12,13,14,15,16,25,27,28,29,30,31,33,],[-15,21,-16,-13,-14,-17,21,-16,21,21,21,21,21,21,-12,]),'CONCAT':([8,9,10,12,13,14,15,16,25,27,28,29,30,31,33,],[-15,22,-16,-13,-14,-17,22,-16,22,22,22,22,22,22,-12,]),'RPAREN':([8,12,13,14,15,16,23,25,27,28,29,30,31,33,],[-15,-13,-14,-17,26,-16,32,33,-7,-8,-9,-10,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,],[2,5,]),'expression':([6,7,11,18,19,20,21,22,],[9,15,25,27,28,29,30,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','lexer.py',74),
  ('program -> program statement','program',2,'p_program','lexer.py',75),
  ('statement -> ID ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','lexer.py',82),
  ('statement -> ESCREVER LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_escrever','lexer.py',93),
  ('statement -> ID ASSIGN ENTRADA LPAREN RPAREN SEMICOLON','statement',6,'p_statement_entrada','lexer.py',98),
  ('statement -> ID ASSIGN ENTRADA SEMICOLON','statement',4,'p_statement_entrada','lexer.py',99),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','lexer.py',103),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','lexer.py',104),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','lexer.py',105),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','lexer.py',106),
  ('expression -> expression CONCAT expression','expression',3,'p_expression_binop','lexer.py',107),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','lexer.py',111),
  ('expression -> NUMBER','expression',1,'p_expression_number','lexer.py',115),
  ('expression -> STRING','expression',1,'p_expression_string','lexer.py',119),
  ('expression -> ID','expression',1,'p_expression_id','lexer.py',123),
  ('expression -> ENTRADA','expression',1,'p_expression_entrada','lexer.py',131),
  ('expression -> ALEATORIO','expression',1,'p_expression_aleatorio','lexer.py',135),
]
