
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COLON COMMA CONCAT DEF DIVIDE ELIF ELSE END EQ ESCREVER GE GT ID IF LE LPAREN LT MINUS NE NUMBER PLUS RETURN RPAREN SEMICOLON STRING TIMES WHILEprogram : statement_liststatement_list : statement statement_list\n                      | statementstatement : statement_assign\n                 | statement_escrever\n                 | statement_if\n                 | statement_while\n                 | statement_def\n                 | statement_returnstatement_assign : ID ASSIGN expression SEMICOLONstatement_escrever : ESCREVER LPAREN expression RPAREN SEMICOLONstatement_if : IF expression COLON statement_list elif_blocks else_blockelif_blocks : elif_block elif_blocks\n                   | emptyelif_block : ELIF expression COLON statement_listelse_block : ELSE COLON statement_list\n                  | emptystatement_while : WHILE expression COLON statement_liststatement_def : DEF ID LPAREN params RPAREN COLON statement_list RETURN expression SEMICOLON ENDparams : ID\n              | params COMMA ID\n              | emptystatement_return : RETURN expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expressionexpression : NUMBERexpression : STRINGexpression : IDexpression : expression CONCAT expressionexpression : ID LPAREN arguments RPARENarguments : expression\n                 | arguments COMMA expression\n                 | emptyempty :'
    
_lr_action_items = {'ID':([0,3,4,5,6,7,8,9,12,13,14,15,16,17,18,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,61,65,66,67,68,69,71,73,74,76,77,80,82,83,85,86,87,90,],[10,10,-4,-5,-6,-7,-8,-9,22,22,24,22,-2,22,22,10,22,22,22,22,22,22,22,22,22,22,22,22,10,62,-23,-10,-42,-18,-11,-42,-42,-14,22,22,81,-12,-17,-13,10,10,10,-16,-15,22,-19,]),'ESCREVER':([0,3,4,5,6,7,8,9,16,28,41,43,44,46,61,65,66,67,68,74,76,77,80,82,83,85,86,90,],[11,11,-4,-5,-6,-7,-8,-9,-2,11,11,-23,-10,-42,-18,-11,-42,-42,-14,-12,-17,-13,11,11,11,-16,-15,-19,]),'IF':([0,3,4,5,6,7,8,9,16,28,41,43,44,46,61,65,66,67,68,74,76,77,80,82,83,85,86,90,],[12,12,-4,-5,-6,-7,-8,-9,-2,12,12,-23,-10,-42,-18,-11,-42,-42,-14,-12,-17,-13,12,12,12,-16,-15,-19,]),'WHILE':([0,3,4,5,6,7,8,9,16,28,41,43,44,46,61,65,66,67,68,74,76,77,80,82,83,85,86,90,],[13,13,-4,-5,-6,-7,-8,-9,-2,13,13,-23,-10,-42,-18,-11,-42,-42,-14,-12,-17,-13,13,13,13,-16,-15,-19,]),'DEF':([0,3,4,5,6,7,8,9,16,28,41,43,44,46,61,65,66,67,68,74,76,77,80,82,83,85,86,90,],[14,14,-4,-5,-6,-7,-8,-9,-2,14,14,-23,-10,-42,-18,-11,-42,-42,-14,-12,-17,-13,14,14,14,-16,-15,-19,]),'RETURN':([0,3,4,5,6,7,8,9,16,28,41,43,44,46,61,65,66,67,68,74,76,77,80,82,83,84,85,86,90,],[15,15,-4,-5,-6,-7,-8,-9,-2,15,15,-23,-10,-42,-18,-11,-42,-42,-14,-12,-17,-13,15,15,15,87,-16,-15,-19,]),'$end':([1,2,3,4,5,6,7,8,9,16,43,44,46,61,65,66,67,68,74,76,77,85,86,90,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,-42,-18,-11,-42,-42,-14,-12,-17,-13,-16,-15,-19,]),'ELIF':([3,4,5,6,7,8,9,16,43,44,46,61,65,66,67,68,74,76,77,85,86,90,],[-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,69,-18,-11,-42,69,-14,-12,-17,-13,-16,-15,-19,]),'ELSE':([3,4,5,6,7,8,9,16,43,44,46,61,65,66,67,68,74,76,77,85,86,90,],[-3,-4,-5,-6,-7,-8,-9,-2,-23,-10,-42,-18,-11,75,-42,-14,-12,-17,-13,-16,-15,-19,]),'ASSIGN':([10,],[17,]),'LPAREN':([11,22,24,],[18,40,42,]),'NUMBER':([12,13,15,17,18,29,30,31,32,33,34,35,36,37,38,39,40,69,71,87,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'STRING':([12,13,15,17,18,29,30,31,32,33,34,35,36,37,38,39,40,69,71,87,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'COLON':([19,20,21,22,23,47,48,49,50,51,52,53,54,55,56,57,70,72,75,78,],[28,-34,-35,-36,41,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-37,-38,80,82,83,]),'PLUS':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[29,-34,-35,-36,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-38,29,29,29,]),'MINUS':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[30,-34,-35,-36,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-38,30,30,30,]),'TIMES':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[31,-34,-35,-36,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-38,31,31,31,]),'DIVIDE':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[32,-34,-35,-36,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-38,32,32,32,]),'GT':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[33,-34,-35,-36,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-38,33,33,33,]),'LT':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[34,-34,-35,-36,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-38,34,34,34,]),'GE':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[35,-34,-35,-36,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-38,35,35,35,]),'LE':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[36,-34,-35,-36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-38,36,36,36,]),'EQ':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[37,-34,-35,-36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-38,37,37,37,]),'NE':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[38,-34,-35,-36,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-38,38,38,38,]),'CONCAT':([19,20,21,22,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,70,78,79,88,],[39,-34,-35,-36,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-38,39,39,39,]),'SEMICOLON':([20,21,22,25,26,45,47,48,49,50,51,52,53,54,55,56,57,70,88,],[-34,-35,-36,43,44,65,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-37,-38,89,]),'RPAREN':([20,21,22,27,40,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,70,79,81,],[-34,-35,-36,45,-42,-42,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-37,70,-39,-41,-20,72,-22,-38,-40,-21,]),'COMMA':([20,21,22,40,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,70,79,81,],[-34,-35,-36,-42,-42,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-37,71,-39,-41,-20,73,-22,-38,-40,-21,]),'END':([89,],[90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,28,41,80,82,83,],[2,16,46,61,84,85,86,]),'statement':([0,3,28,41,80,82,83,],[3,3,3,3,3,3,3,]),'statement_assign':([0,3,28,41,80,82,83,],[4,4,4,4,4,4,4,]),'statement_escrever':([0,3,28,41,80,82,83,],[5,5,5,5,5,5,5,]),'statement_if':([0,3,28,41,80,82,83,],[6,6,6,6,6,6,6,]),'statement_while':([0,3,28,41,80,82,83,],[7,7,7,7,7,7,7,]),'statement_def':([0,3,28,41,80,82,83,],[8,8,8,8,8,8,8,]),'statement_return':([0,3,28,41,80,82,83,],[9,9,9,9,9,9,9,]),'expression':([12,13,15,17,18,29,30,31,32,33,34,35,36,37,38,39,40,69,71,87,],[19,23,25,26,27,47,48,49,50,51,52,53,54,55,56,57,59,78,79,88,]),'arguments':([40,],[58,]),'empty':([40,42,46,66,67,],[60,64,68,76,68,]),'params':([42,],[63,]),'elif_blocks':([46,67,],[66,77,]),'elif_block':([46,67,],[67,67,]),'else_block':([66,],[74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','lexer.py',401),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','lexer.py',405),
  ('statement_list -> statement','statement_list',1,'p_statement_list','lexer.py',406),
  ('statement -> statement_assign','statement',1,'p_statement','lexer.py',413),
  ('statement -> statement_escrever','statement',1,'p_statement','lexer.py',414),
  ('statement -> statement_if','statement',1,'p_statement','lexer.py',415),
  ('statement -> statement_while','statement',1,'p_statement','lexer.py',416),
  ('statement -> statement_def','statement',1,'p_statement','lexer.py',417),
  ('statement -> statement_return','statement',1,'p_statement','lexer.py',418),
  ('statement_assign -> ID ASSIGN expression SEMICOLON','statement_assign',4,'p_statement_assign','lexer.py',422),
  ('statement_escrever -> ESCREVER LPAREN expression RPAREN SEMICOLON','statement_escrever',5,'p_statement_escrever','lexer.py',426),
  ('statement_if -> IF expression COLON statement_list elif_blocks else_block','statement_if',6,'p_statement_if','lexer.py',430),
  ('elif_blocks -> elif_block elif_blocks','elif_blocks',2,'p_elif_blocks','lexer.py',434),
  ('elif_blocks -> empty','elif_blocks',1,'p_elif_blocks','lexer.py',435),
  ('elif_block -> ELIF expression COLON statement_list','elif_block',4,'p_elif_block','lexer.py',442),
  ('else_block -> ELSE COLON statement_list','else_block',3,'p_else_block','lexer.py',446),
  ('else_block -> empty','else_block',1,'p_else_block','lexer.py',447),
  ('statement_while -> WHILE expression COLON statement_list','statement_while',4,'p_statement_while','lexer.py',451),
  ('statement_def -> DEF ID LPAREN params RPAREN COLON statement_list RETURN expression SEMICOLON END','statement_def',11,'p_statement_def','lexer.py',455),
  ('params -> ID','params',1,'p_params','lexer.py',460),
  ('params -> params COMMA ID','params',3,'p_params','lexer.py',461),
  ('params -> empty','params',1,'p_params','lexer.py',462),
  ('statement_return -> RETURN expression SEMICOLON','statement_return',3,'p_statement_return','lexer.py',471),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','lexer.py',475),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','lexer.py',476),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','lexer.py',477),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','lexer.py',478),
  ('expression -> expression GT expression','expression',3,'p_expression_comp','lexer.py',482),
  ('expression -> expression LT expression','expression',3,'p_expression_comp','lexer.py',483),
  ('expression -> expression GE expression','expression',3,'p_expression_comp','lexer.py',484),
  ('expression -> expression LE expression','expression',3,'p_expression_comp','lexer.py',485),
  ('expression -> expression EQ expression','expression',3,'p_expression_comp','lexer.py',486),
  ('expression -> expression NE expression','expression',3,'p_expression_comp','lexer.py',487),
  ('expression -> NUMBER','expression',1,'p_expression_number','lexer.py',491),
  ('expression -> STRING','expression',1,'p_expression_string','lexer.py',495),
  ('expression -> ID','expression',1,'p_expression_var','lexer.py',499),
  ('expression -> expression CONCAT expression','expression',3,'p_expression_concat','lexer.py',503),
  ('expression -> ID LPAREN arguments RPAREN','expression',4,'p_expression_call','lexer.py',507),
  ('arguments -> expression','arguments',1,'p_arguments','lexer.py',511),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','lexer.py',512),
  ('arguments -> empty','arguments',1,'p_arguments','lexer.py',513),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',522),
]
